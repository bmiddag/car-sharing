package objects;

import java.util.EnumMap;
import exceptions.DataAccessException;
import interfaces.DataAccessContext;
import java.util.Date;
import jdbc.JDBCDataAccessProvider;


/**
 * Representation of a trip with a car, made by a certain user. 
 * Contains some state info about the car and the trip.
 */
public class Ride extends DataObject {

    public enum Field implements DataField {

	ID(Integer.class, true, false),
	USER(User.class), 
	CAR(Car.class), 
	BEGIN(Long.class), 
	END(Long.class), 
	APPROVED(Boolean.class), 
	PENDING(Boolean.class), 
	STARTKM(Double.class), 
	STOPKM(Double.class),
        PRICE(Integer.class),
	TIME(Long.class, false, true);

	private final boolean stamp;
	private final boolean key;
	private final Class type;

	private Field(Class type, boolean key, boolean stamp) {
		this.type = type;
		this.key = key;
		this.stamp = stamp;
	}
	
	private Field(Class type) {
		this.type = type;
		this.key = false;
		this.stamp = false;
	}
	
	@Override
	public Class getType() {
		return type;
	}

	@Override
	public boolean isKey() {
		return key;
	}

	@Override
	public boolean isStamp() {
		return stamp;
	}

    }

    /**
     *
     * @param id the is generated by the db
     * @param user the user who made the ride
     * @param car the car that was driven
     * @param begin when the ride started
     * @param end when the ride stopped
     * @param approved if the owner approves the ride made (and the noted mileages)
     * @param pending if a administrator checked this ride
     * @param startKM the mileage before the ride
     * @param stopKM the mileage after the ride
     * @param time the time this ride was entered into the system
     */
    public Ride(Integer id, User user, Car car, Long begin, Long end,
            Boolean approved, Boolean pending, Double startKM, Double stopKM, Integer price, Long time) {

        super(new EnumMap<>(Field.class));
        data.put(Field.ID, id);
        data.put(Field.ID, id);
        data.put(Field.CAR, car);
        data.put(Field.USER, user);
        data.put(Field.BEGIN, begin);
        data.put(Field.END, end);
        data.put(Field.APPROVED, approved);
        data.put(Field.PENDING, pending);
        data.put(Field.STARTKM, startKM);
        data.put(Field.STOPKM, stopKM);
        data.put(Field.PRICE, price);
        data.put(Field.TIME, time);

    }
    
    

    /**
     *
     * @return the id assigned by the db
     */
    public Integer getId() {
        return (Integer) data.get(Field.ID);
    }

    /**
     *
     * @return the id of the car driven
     */
    public Integer getCarID() {
        Car car = (Car) data.get(Field.CAR);
        return car == null ? null : car.getId();
    } 
    
    /**
     *
     * @return the car driven
     * @throws exceptions.DataAccessException
     */
    public Car getCar() throws DataAccessException {
        return (Car) data.get(Field.CAR);
    }

    /**
     *
     * @return the user who drove
     * @throws exceptions.DataAccessException
     */
    public User getUser() throws DataAccessException {
        return (User) data.get(Field.USER);
    }
    
    /**
     *
     * @return the id of the driver
     */
    public Integer getUserID() {
        User user = (User) data.get(Field.USER);
        return user == null ? null : user.getId();
    }

    /**
     *
     * @return the start time of the ride
     */
    public Long getBegin() {
        return (Long) data.get(Field.BEGIN);
    }

    /**
     *
     * @return the stop time of the ride
     */
    public Long getEnd() {
        return (Long) data.get(Field.END);
    }

    /**
     *
     * @return true if the owner of the car approves the ride and its mileages
     */
    public Boolean getApproved() {
        return (Boolean) data.get(Field.APPROVED);
    }

    /**
     *
     * @return true if an administrator already checked this ride
     */
    public Boolean getPending() {
        return (Boolean) data.get(Field.PENDING);
    }

    /**
     *
     * @return the mileage at the beginning of the ride
     */
    public Double getStartKM() {
        return (Double) data.get(Field.STARTKM);
    }

    /**
     *
     * @return the mileage at the end of the trip
     */
    public Double getStopKM() {
        return (Double) data.get(Field.STOPKM);
    }

    /**
     *
     * @return the time this ride was entered into the system
     */
    public Long getTime() {
        return (Long) data.get(Field.TIME);
    }    
    
    public Integer getPrice() {
        return (Integer) data.get(Field.PRICE);
    }

    public void setPrice(Integer price) {
        data.put(Field.PRICE, price);
    }

    /**
     *
     * @param begin the time the ride started
     */
    public void setBegin(Long begin) {
        data.put(Field.BEGIN, begin);
    }

    /**
     *
     * @param end the time the ride stopped
     */
    public void setEnd(Long end) {
        data.put(Field.END, end);
    }

    /**
     *
     * @param approved set to true if the owner approves the ride and its mileages
     */
    public void setApproved(Boolean approved) {
        data.put(Field.APPROVED, approved);
    }

    /**
     *
     * @param startKM the mileage at the start of the ride 
     */
    public void setStartKM(Double startKM) {
        data.put(Field.STARTKM, startKM);
    }

    /**
     *
     * @param stopKM the mileage after the ride
     */
    public void setStopKM(Double stopKM) {
        data.put(Field.STOPKM, stopKM);
    }

    /**
     *
     * @param pending set to true if an administrator checked this ride
     */

    public void setPending(Boolean pending) {
        data.put(Field.PENDING, pending);
    }

}
