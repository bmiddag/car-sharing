package objects;

import java.util.EnumMap;

/**
 * Refueling of a Car. Tracks the state of the car. Proof File can be approved.
 */
public class Refueling extends DataObject {

    public enum Field implements DataObject.DataField {
	
        ID(Integer.class, true, false),
        RIDE(Ride.class),
        PRICE(Integer.class),
        LITRE(Double.class),
        PROOF(Integer.class),
        TYPE(String.class),
        APPROVED(Boolean.class),
        MILEAGE(Double.class),
        TIME(Long.class, false, true),
        EDIT(Long.class, false, true);

	private final boolean stamp;
        private final boolean key;
        private final Class type;

        private Field(Class type, boolean key, boolean stamp) {
            this.type = type;
            this.key = key;
            this.stamp = stamp;
        }

        private Field(Class type) {
            this.type = type;
            this.key = false;
            this.stamp = false;
        }

        @Override
        public Class getType() {
            return type;
        }

        @Override
        public boolean isKey() {
            return key;
        }

        @Override
        public boolean isStamp() {
            return stamp;
        }

    }

    /**
     *
     * @param id the id generated by the db
     * @param ride the Ride in which the car was refueled
     * @param price how much the refueling costed
     * @param litre how much litres were put in the car
     * @param proof File proving the payment
     * @param type type of fuel
     * @param approved true if owner approves of this refueling
     * @param mileage the mileage atm of refueling
     * @param time the time the refueling was added to the system
     * @param edit the time the refueling was last edited
     */
    public Refueling(Integer id, Ride ride, Integer price, Double litre,
            Integer proof, String type, Boolean approved, Double mileage, Long time, Long edit) {
        super(new EnumMap<>(Field.class));

        data.put(Field.ID, id);
        data.put(Field.LITRE, litre);
        data.put(Field.PRICE, price);
        data.put(Field.PROOF, proof);
        data.put(Field.TYPE, type);
        data.put(Field.APPROVED, approved);
        data.put(Field.MILEAGE, mileage);
        data.put(Field.TIME, time);
        data.put(Field.EDIT, edit);
        data.put(Field.RIDE, ride);

    }
    
    

    /**
     *
     * @return the id generated by the db
     */
    public Integer getId() {
        return (Integer) data.get(Field.ID);
    }
    
    /**
     *
     * @return the number of litres refueled
     */
    public Double getLitre() {
        return (Double) data.get(Field.LITRE);
    }

    /**
     *
     * @return the amount of money paid to refuel
     */
    public Integer getPrice() {
        return (Integer) data.get(Field.PRICE);
    }

    /**
     *
     * @return the proof file
     */
    public Integer getProof() {
        return (Integer) data.get(Field.PROOF);
    }

    /**
     *
     * @return the type of fuel
     */
    public String getType() {
        return (String) data.get(Field.TYPE);
    }

    /**
     *
     * @return true if the owner approves of this refueling
     */
    public Boolean getApproved() {
        return (Boolean) data.get(Field.APPROVED);
    }

    /**
     *
     * @return the mileage atm of refueling
     */
    public Double getMileage() {
        return (Double) data.get(Field.MILEAGE);
    }

    /**
     *
     * @return the time this refueling was added to the system
     */
    public Long getTime() {
        return (Long) data.get(Field.TIME);
    }

    /**
     *
     * @return the time this refueling was last edited
     */
    public Long getEdit() {
        return (Long) data.get(Field.EDIT);
    }

    /**
     *
     * @return the ride in which the car was refueled
     */
    public Ride getRide() {
        return (Ride) data.get(Field.RIDE);
    }

    /**
     *
     * @param ride the ride in which the car was refueled
     */
    public void setRide(Ride ride) {
        data.put(Field.RIDE, ride);
    }

    /**
     *
     * @param litre number of litres added
     */
    public void setLitre(Double litre) {
        data.put(Field.LITRE, litre);
    }

    /**
     *
     * @param price price paid to refuel
     */
    public void setPrice(Integer price) {
        data.put(Field.PRICE, price);
    }

    /**
     *
     * @param proof file of proof
     */
    public void setProof(Integer proof) {
        data.put(Field.PROOF, proof);
    }

    /**
     *
     * @param type type of fuel
     */

    public void setType(String type) {
        data.put(Field.TYPE, type);
    }

    /**
     *
     * @param approved set to true if the owner of the car approves
     */
    public void setApproved(Boolean approved) {
        data.put(Field.APPROVED, approved);
    }

    /**
     *
     * @param mileage the mileage atm of refueling
     */
    public void setMileage(Double mileage) {
        data.put(Field.MILEAGE, mileage);
    }
    
}
